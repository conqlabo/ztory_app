name: CI Without Fastlane

on:
  workflow_call:
  workflow_dispatch:
  pull_request:
    branches: [main, staging]
    tags:
      - "v*"

jobs:
  analyze-test-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
           
      - name: Setup Java Version
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: "12.x"
          cache: 'gradle'
      
      - name: Get Branch name # usefull to know where to deploy
        id: branch
        run: echo  "::set-output name=branch::${GITHUB_REF##*/}"
      
      - name: Decrypt Android keys
        run: sh ./.github/scripts/decrypt_secret.sh
        env:
          ANDROID_KEYS_ZIP_PASSPHRASE: ${{ secrets.ANDROID_KEYS_ZIP_PASSPHRASE }}
      
      - name: Setup Flutter environnment
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.7.1'
          channel: 'stable' # can also set flutter-version
          cache: true
      
      - name: Install project dependencies # can also be cached for f
        run: flutter pub get
      
      - name: Check Code Quality
        run: flutter analyze
      
      - name: Run tests
        run: flutter test
        
      - name: Build artifacts
        run: flutter build apk --release -v

      - name: Upload app bundle artifact
        uses: actions/upload-artifact@v2
        with: 
          name: release-apk
          path: build/app/outputs/apk/release/app-release.apk

      - name: Decode google-services.json
        env: 
            GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: echo "$GOOGLE_SERVICES_JSON" > android/app/google-services.json

      - name: Decode firebase_option
        env:
          firebase_options_dart: ${{secrets.FIREBASE_OPTION}}
        run : echo "$firebase_options_dart" > lib/firebase_options.dart

      - name: Get Android Build from artifacts
        uses: actions/download-artifact@v2
        with:
          name: release-apk

      - name: Upload artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
            appId: ${{secrets.ANDROID_APPID}}
            token: ${{secrets.FB_CLI_TOKEN}}
            groups: qa-team
            file: app-release.apk

      - name: Get Slackwebhook
        id: slackwebhook
        uses: haya14busa/action-cond@v1
        with:
          cond: ${{ github.event.pull_request.base.ref == 'main' }}
          if_true: ${{ secrets.SLACK_PROD_WEBHOOK }}
          if_false: ${{ secrets.SLACK_STAGING_WEBHOOK }}
      
      - name: Notify on Appropriate Slack Channel
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: ${{ github.event.pull_request.base.ref }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: New release available
          SLACK_MESSAGE: ✅ Deployment done
          SLACK_USERNAME: ZtoryBot
          SLACK_WEBHOOK: ${{ steps.slackwebhook.outputs.value }}
 
 
  # deploy_android_staging:
  #   name: Deploy Android Build to Qa Uses
  #   needs: analyze-test-build
  #   runs-on: macos-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
      
  #     - name: Decode google-services.json
  #       env: 
  #           GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
  #       run: echo "$GOOGLE_SERVICES_JSON" > android/app/google-services.json

  #     - name: Decode firebase_option
  #       env:
  #         firebase_options_dart: ${{secrets.FIREBASE_OPTION}}
  #       run : echo "$firebase_options_dart" > lib/firebase_options.dart

  #     - name: Get Android Build from artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: release-apk

  #     - name: Upload artifact to Firebase App Distribution
  #       uses: wzieba/Firebase-Distribution-Github-Action@v1
  #       with:
  #           appId: ${{secrets.ANDROID_APPID}}
  #           token: ${{secrets.FB_CLI_TOKEN}}
  #           groups: qa-team
  #           file: app-release.apk

  #     - name: Get Slackwebhook
  #       id: slackwebhook
  #       uses: haya14busa/action-cond@v1
  #       with:
  #         cond: ${{ steps.branch.outputs.branch == 'main' }}
  #         if_true: ${{ secrets.SLACK_PROD_WEBHOOK }}
  #         if_false: ${{ secrets.SLACK_STAGING_WEBHOOK }}
      
  #     - name: Notify on Appropriate Slack Channel
  #       uses: rtCamp/action-slack-notify@v2
  #       env:
  #         SLACK_CHANNEL: ${{ steps.branch.outputs.branch }}
  #         SLACK_COLOR: ${{ job.status }}
  #         SLACK_TITLE: New release available
  #         SLACK_MESSAGE: ✅ Deployment done
  #         SLACK_USERNAME: ZtoryBot
  #         SLACK_WEBHOOK: ${{ steps.slackwebhook.outputs.value }}
